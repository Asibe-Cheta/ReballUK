generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @id
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  // Email verification fields
  verificationToken      String?   @map("verification_token")
  verificationExpires    DateTime? @map("verification_expires")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]

  @@map("users")
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  position      String?
  trainingLevel String?  @map("training_level") @default("BEGINNER")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("profiles")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  sessionType   String        @map("session_type")
  position      String?
  scheduledFor  DateTime      @map("scheduled_for")
  duration      Int           @default(60)
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  price         Decimal       @default(0)
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("bookings")
}

model Progress {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  sessionType   String   @map("session_type")
  position      String?
  successRate   Float    @map("success_rate")
  confidence    Int
  duration      Int
  notes         String?
  sessionDate   DateTime @map("session_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("progress")
}

model Video {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  bookingId     String?  @map("booking_id")
  title         String
  description   String?
  videoUrl      String   @map("video_url")
  thumbnailUrl  String?  @map("thumbnail_url")
  videoType     String   @map("video_type") // "SISW" or "TAV"
  duration      Int?
  uploadDate    DateTime @default(now()) @map("upload_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("videos")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  position    String?
  level       String?
  duration    Int      @default(60)
  price       Decimal  @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("courses")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}
