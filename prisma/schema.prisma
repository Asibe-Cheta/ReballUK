generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum PlayerPosition {
  STRIKER
  WINGER
  CAM
  FULLBACK
  MIDFIELDER
  DEFENDER
  GOALKEEPER
  OTHER
}

enum TrainingLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  IN_PROGRESS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @id
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  // Email verification fields
  verificationToken      String?   @map("verification_token")
  verificationExpires    DateTime? @map("verification_expires")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]

  // Relations
  profile       Profile?
  bookings      Booking[]
  progress      Progress[]
  videos        Video[]
  certificates  Certificate[]

  @@map("users")
}

model Profile {
  id                  String         @id @default(cuid())
  userId              String         @unique @map("user_id")
  firstName           String?        @map("first_name")
  lastName            String?        @map("last_name")
  position            PlayerPosition?
  trainingLevel       TrainingLevel  @map("training_level") @default(BEGINNER)
  dateOfBirth         DateTime?      @map("date_of_birth")
  preferredFoot       String?        @map("preferred_foot")
  height              Int?           // in cm
  weight              Int?           // in kg
  bio                 String?
  goals               String[]       @default([])
  confidenceRating    Int?           @map("confidence_rating")
  completedOnboarding Boolean        @map("completed_onboarding") @default(false)
  isActive            Boolean        @default(true) @map("is_active")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @default(now()) @updatedAt @map("updated_at")

  // Relations
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  courseId      String?       @map("course_id")
  sessionType   String        @map("session_type")
  position      String?
  scheduledFor  DateTime      @map("scheduled_for")
  duration      Int           @default(60)
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  price         Decimal       @default(0)
  amount        Decimal       @default(0)
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course?       @relation(fields: [courseId], references: [id])
  videos        Video[]

  @@map("bookings")
}

model Progress {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  courseId              String?  @map("course_id")
  videoId               String?  @map("video_id")
  sessionType           String   @map("session_type")
  position              String?
  successRate           Float    @map("success_rate")
  confidence            Int
  duration              Int
  timeSpent             Int?     @map("time_spent")
  rating                Int?
  completionPercentage  Float?   @map("completion_percentage")
  isCompleted           Boolean  @default(false) @map("is_completed")
  feedback              String?
  lastAccessedAt        DateTime @map("last_accessed_at") @default(now())
  notes                 String?
  sessionDate           DateTime @map("session_date")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course                Course?  @relation(fields: [courseId], references: [id])
  video                 Video?   @relation(fields: [videoId], references: [id])

  @@unique([userId, courseId, videoId])
  @@map("progress")
}

model Video {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  bookingId     String?  @map("booking_id")
  courseId      String?  @map("course_id")
  title         String
  description   String?
  videoUrl      String   @map("video_url")
  thumbnailUrl  String?  @map("thumbnail_url")
  videoType     String   @map("video_type") // "SISW" or "TAV"
  analysisType  String?  @map("analysis_type")
  position      String?
  tags          String[] @default([])
  viewCount     Int      @default(0) @map("view_count")
  publicId      String?  @map("public_id")
  duration      Int?
  uploadDate    DateTime @default(now()) @map("upload_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking       Booking? @relation(fields: [bookingId], references: [id])
  course        Course?  @relation(fields: [courseId], references: [id])
  progress      Progress[]

  @@map("videos")
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String?
  position      String?
  level         String?
  duration      Int      @default(60)
  price         Decimal  @default(0)
  tags          String[] @default([])
  thumbnailUrl  String?  @map("thumbnail_url")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  bookings      Booking[]
  progress      Progress[]
  videos        Video[]

  @@map("courses")
}

model Certificate {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?
  issuedAt    DateTime @default(now()) @map("issued_at")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}


