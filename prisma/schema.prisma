generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @id
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       Boolean         @default(false) @map("email_verified")
  image               String?
  password            String?
  role                UserRole        @default(USER)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now()) @updatedAt
  accounts            Account[]
  bookings            Booking[]
  certificates        Certificate[]
  coachNotes          CoachNote[]     @relation("CoachNotes")
  userNotes           CoachNote[]     @relation("UserNotes")
  coachCommunications Communication[] @relation("CoachCommunications")
  userCommunications  Communication[] @relation("UserCommunications")
  profile             Profile?
  progress            Progress[]
  videos              Video[]

  @@map("users")
}

model Profile {
  id                  String          @id @default(cuid())
  userId              String          @unique @map("user_id")
  playerName          String?         @map("player_name")
  dateOfBirth         DateTime?       @map("date_of_birth")
  guardianName        String?         @map("guardian_name")
  contactEmail        String?         @map("contact_email")
  contactNumber       String?         @map("contact_number")
  postcode            String?
  medicalConditions   String?         @map("medical_conditions")
  position            PlayerPosition?
  playingLevel        String?         @map("playing_level")
  currentTeam         String?         @map("current_team")
  evidenceFiles       String[]        @default([]) @map("evidence_files")
  trainingReason      String?         @map("training_reason")
  hearAbout           String?         @map("hear_about")
  referralName        String?         @map("referral_name")
  postTrainingSnacks  String?         @map("post_training_snacks")
  postTrainingDrinks  String?         @map("post_training_drinks")
  socialMediaConsent  Boolean?        @default(false) @map("social_media_consent")
  marketingConsent    Boolean?        @default(false) @map("marketing_consent")
  welcomeCompleted    Boolean         @default(false) @map("welcome_completed")
  welcomeCompletedDate DateTime?      @map("welcome_completed_date")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @default(now()) @updatedAt @map("updated_at")
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  courseId      String?       @map("course_id")
  sessionType   String        @map("session_type")
  position      String?
  scheduledFor  DateTime      @map("scheduled_for")
  duration      Int           @default(60)
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  price         Decimal       @default(0)
  amount        Decimal       @default(0)
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  course        Course?       @relation(fields: [courseId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos        Video[]

  @@map("bookings")
}

model Progress {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  courseId             String?  @map("course_id")
  videoId              String?  @map("video_id")
  sessionType          String   @map("session_type")
  position             String?
  successRate          Float    @map("success_rate")
  confidence           Int
  duration             Int
  timeSpent            Int?     @map("time_spent")
  rating               Int?
  completionPercentage Float?   @map("completion_percentage")
  isCompleted          Boolean  @default(false) @map("is_completed")
  feedback             String?
  lastAccessedAt       DateTime @default(now()) @map("last_accessed_at")
  notes                String?
  sessionDate          DateTime @default(now()) @map("session_date")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")
  course               Course?  @relation(fields: [courseId], references: [id])
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video                Video?   @relation(fields: [videoId], references: [id])

  @@unique([userId, courseId, videoId])
  @@map("progress")
}

model Video {
  id           String     @id @default(cuid())
  userId       String     @map("user_id")
  bookingId    String?    @map("booking_id")
  courseId     String?    @map("course_id")
  sessionId    String?    @map("session_id")
  title        String
  description  String?
  videoUrl     String     @map("video_url")
  thumbnailUrl String?    @map("thumbnail_url")
  videoType    String     @map("video_type")
  analysisType String?    @map("analysis_type")
  position     String?
  tags         String[]   @default([])
  viewCount    Int        @default(0) @map("view_count")
  publicId     String?    @map("public_id")
  isActive     Boolean    @default(true) @map("is_active")
  isPreview    Boolean    @default(false) @map("is_preview")
  orderIndex   Int?       @map("order_index")
  duration     Int?
  uploadDate   DateTime   @default(now()) @map("upload_date")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  progress     Progress[]
  booking      Booking?   @relation(fields: [bookingId], references: [id])
  course       Course?    @relation(fields: [courseId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Course {
  id           String     @id @default(cuid())
  title        String
  description  String?
  position     String?
  level        String?
  duration     Int        @default(60)
  price        Decimal    @default(0)
  tags         String[]   @default([])
  thumbnailUrl String?    @map("thumbnail_url")
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  bookings     Booking[]
  progress     Progress[]
  videos       Video[]

  @@map("courses")
}

model Certificate {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?
  issuedAt    DateTime @default(now()) @map("issued_at")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model CoachNote {
  id        String   @id @default(cuid())
  coachId   String   @map("coach_id")
  userId    String   @map("user_id")
  sessionId String?  @map("session_id")
  title     String
  content   String
  type      String   @default("GENERAL")
  isPrivate Boolean  @default(false) @map("is_private")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  coach     User     @relation("CoachNotes", fields: [coachId], references: [id], onDelete: Cascade)
  user      User     @relation("UserNotes", fields: [userId], references: [id], onDelete: Cascade)

  @@map("coach_notes")
}

model Communication {
  id         String   @id @default(cuid())
  coachId    String   @map("coach_id")
  userId     String?  @map("user_id")
  type       String   @default("MESSAGE")
  subject    String?
  content    String
  isRead     Boolean  @default(false) @map("is_read")
  isArchived Boolean  @default(false) @map("is_archived")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  coach      User     @relation("CoachCommunications", fields: [coachId], references: [id], onDelete: Cascade)
  user       User?    @relation("UserCommunications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("communications")
}

enum PlayerPosition {
  STRIKER
  WINGER
  CAM
  FULLBACK
  MIDFIELDER
  DEFENDER
  GOALKEEPER
  OTHER
}

enum TrainingLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  IN_PROGRESS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum UserRole {
  USER
  COACH
  ADMIN
}
