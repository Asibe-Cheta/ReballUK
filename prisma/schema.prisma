// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js required models - mapping to existing auth tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core User model - mapping to existing users table
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Added for credentials authentication
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // NextAuth relationships
  accounts Account[]
  sessions Session[]

  // REBALL relationships
  profile  Profile?
  bookings Booking[]
  progress Progress[]
  certificates Certificate[]

  @@map("users")
}

// Player profiles - mapping to existing profiles table
model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  dateOfBirth   DateTime? @map("date_of_birth")
  position      PlayerPosition?
  trainingLevel TrainingLevel? @map("training_level")
  confidenceRating Int? @map("confidence_rating") // 1-10 scale
  preferredFoot String? @map("preferred_foot") // left, right, both
  height        Int? // in cm
  weight        Int? // in kg
  bio           String?
  goals         String? // Training goals
  phoneNumber   String? @map("phone_number")
  emergencyContact String? @map("emergency_contact")
  medicalInfo   String? @map("medical_info")
  isActive      Boolean @default(true) @map("is_active")
  completedOnboarding Boolean @default(false) @map("completed_onboarding")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Training courses - mapping to existing courses table
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  level       TrainingLevel
  position    PlayerPosition?
  duration    Int // in minutes
  price       Decimal? @db.Money
  isActive    Boolean @default(true) @map("is_active")
  thumbnailUrl String? @map("thumbnail_url")
  tags        String[] // Array of training tags
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  videos   Video[]
  bookings Booking[]
  progress Progress[]

  @@map("courses")
}

// Course bookings - mapping to existing bookings table
model Booking {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  courseId     String      @map("course_id")
  status       BookingStatus
  bookedAt     DateTime    @default(now()) @map("booked_at")
  scheduledFor DateTime?   @map("scheduled_for")
  completedAt  DateTime?   @map("completed_at")
  notes        String?
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  amount       Decimal?    @db.Money
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

// User progress tracking - mapping to existing progress table
model Progress {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  courseId         String   @map("course_id")
  videoId          String?  @map("video_id")
  completionPercentage Int @default(0) @map("completion_percentage") // 0-100
  timeSpent        Int      @default(0) @map("time_spent") // in seconds
  lastAccessedAt   DateTime @default(now()) @map("last_accessed_at")
  isCompleted      Boolean  @default(false) @map("is_completed")
  feedback         String?
  rating           Int? // 1-5 stars
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  video  Video?  @relation(fields: [videoId], references: [id], onDelete: SetNull)

  @@unique([userId, courseId, videoId])
  @@map("progress")
}

// Training videos - mapping to existing videos table
model Video {
  id          String   @id @default(cuid())
  courseId    String   @map("course_id")
  title       String
  description String?
  videoUrl    String   @map("video_url")
  thumbnailUrl String? @map("thumbnail_url")
  duration    Int // in seconds
  orderIndex  Int     @map("order_index") // Order within course
  isPreview   Boolean @default(false) @map("is_preview") // Free preview
  analysisType String? @map("analysis_type") // SISW, TAV, etc.
  tags        String[] // Array of tags
  viewCount   Int     @default(0) @map("view_count")
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("videos")
}

// Achievement certificates - mapping to existing certificates table
model Certificate {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  courseId    String?  @map("course_id")
  title       String
  description String?
  issuedAt    DateTime @default(now()) @map("issued_at")
  expiresAt   DateTime? @map("expires_at")
  certificateUrl String? @map("certificate_url")
  badgeUrl    String?  @map("badge_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

// Enums for type safety
enum PlayerPosition {
  STRIKER
  WINGER
  CAM // Central Attacking Midfielder
  FULLBACK
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  OTHER

  @@map("player_position")
}

enum TrainingLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL

  @@map("training_level")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("booking_status")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED

  @@map("payment_status")
}
